---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
---

<Layout title="Stress testing" classes="stress-testing">
	<article>
		<h1>Stress testing</h1>
		<p class="section">
			Testing swup behavior on rapid clicks and consecutive visits.
		</p>
		<h2>Double clicks</h2>
		<ul role="list" class="card-grid">
			<Card href="/" title="Double-click this link" body="Check the debug output for triggered hooks: there should only be a single visit that happened." />
		</ul>
		<h2>Rapid navigation</h2>
		<p class="section">
			Trigger automated rapid navigations. There should be no flickering and no hooks called
			for aborted visits.<br>
			You should land back at this page, with various intermediate stops.
		</p>
		<!-- <ul role="list" class="card-grid">
			<Card href="/" title="Abort during out-phase" body="" />
			<Card href="/" title="Abort during in-phase" body="" />
		</ul>
		<ul role="list" class="card-grid">
			<Card href="/" title="Abort consecutive visits" body="" />
			<Card href="/" title="Abort fragments" body="" />
		</ul> -->
		<p class="section">
			<rapid-navigation-trigger phase="out" label="Abort during out-phase" urls="/, /history"></rapid-navigation-trigger><br>
			<rapid-navigation-trigger phase="in" label="Abort during in-phase" urls="/, /history"></rapid-navigation-trigger><br>
			<rapid-navigation-trigger phase="out" label="Abort consecutive visits" urls="/, /history, /lang, /scrolling"></rapid-navigation-trigger><br>
			<rapid-navigation-trigger phase="out" label="Abort fragments" urls="/fragments, /fragments/filter-a-f, /fragments/filter-g-o, /fragments/filter-p-z"></rapid-navigation-trigger><br>
		</p>
	</article>

	<script>
		customElements.define('rapid-navigation-trigger', class extends HTMLElement {
			timeout = 200;
			phase = 'out';
			label = 'Trigger rapid navigation';
			link: HTMLElement;
			urls: string[];
			queue = Promise.resolve();
			constructor() {
				super();

				this.urls = (this.getAttribute('urls') || '/').split(',').map((url) => url.trim());
				this.urls.push(window.location.pathname);

				this.phase = this.getAttribute('phase') || this.phase;
				this.label = this.getAttribute('label') || this.label;

				this.innerHTML = `<a href="/" data-no-swup>${this.label}</a>`;
				this.link = this.querySelector('a')!;
				this.link.addEventListener('click', (event) => {
					event.preventDefault();
					this.triggerRapidNavigation();
				});
			}
			async triggerRapidNavigation() {
				const interruptAt = this.phase === 'in' ? 'content:replace' : 'visit:start';
				for (const url of this.urls) {
					const ready = this.waitForHook(interruptAt);
					this.navigate(url);
					await ready;
					await this.sleep(this.timeout);
				}
			}
			navigate(url) {
				// console.log(`Navigating to ${url}`);
				window.swup.navigate(url);
			}
			waitForHook(hook) {
				return new Promise((resolve) => {
					window.swup.hooks.once(hook, (visit) => resolve(visit));
				});
			}
			sleep(ms) {
				return new Promise((resolve) => setTimeout(resolve, ms));
			}
		});
	</script>
</Layout>
